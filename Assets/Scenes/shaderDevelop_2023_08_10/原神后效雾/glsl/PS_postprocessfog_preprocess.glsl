#version 450

#define _64__m0  vec3(-9.08528, 201.89453, -30.94784      )       //_64._m0
#define _64__m1  vec4(1.00, 0.25, 6000.00, 0.00017        )       //_64._m1
#define _64__m2  vec4(-23999.00, 24000.00, -3.99983, 4.00 )       //_64._m2
#define _64__m3  vec4(0.77914, 0.60906, 0.52263, 1.08365  )       //_64._m3
#define _64__m4  vec4(0.09159, 0.02426, 0.04, 0.00        )       //_64._m4
#define _64__m5  vec4(0.00839, -0.12581, 1.00, 1.00       )       //_64._m5
#define _64__m6  vec4(0.05654, 0.13585, 0.35222, 0.92     )       //_64._m6
#define _64__m7  vec4(-0.00127, 0.0048, -0.13633, 0.00    )       //_64._m7
#define _64__m8  vec4(0.00147, -0.26394, 0.00047, -0.00707)       //_64._m8
#define _64__m9  vec4(0.46001, 0.42273, 0.46656, 0.00017  )       //_64._m9
#define _64__m10 vec4(-0.00033, 2.44722, -0.001, 1.17958  )       //_64._m10
#define _64__m11 vec4(0.32624, 0.22609, 0.19079, 15.00    )       //_64._m11
#define _64__m12 vec4(0.002, 0.00, -0.0005, 1.07681       )       //_64._m12
#define _64__m13 vec4(0.12955, -2.04365, 0.03779, -3.27578)       //_64._m13
#define _64__m14 vec4(1.00, 1.00, 0.00, 0.00              )       //_64._m14
#define _64__m15 vec4(89.90182, 0.00, 656.74915, 0.00     )       //_64._m15
#define _64__m16 vec4(1.00, 1.00, 1.00, 0.07213           )       //_64._m16
#define _64__m17 vec4(1.00, -1.00, 10000.00, 0.00         )       //_64._m17
#define _64__m18 vec4(1.00, 1.00, 1.00, -15.00            )       //_64._m18
#define _64__m19 vec4(0.00, 0.00, 0.00, 0.00              )       //_64._m19
#define _64__m20 vec4(0.00, 0.00, 0.00, 0.00              )       //_64._m20
#define _64__m21 float (0.00                                )       //_64._m21
#define _64__m22 vec3(0.00, 0.00, 0.00                    )       //_64._m22
#define _64__m23 vec4(0.00, 0.00, 0.00, 0.00              )       //_64._m23
#define _64__m24 vec4(0.00, 0.00, 0.00, 0.00              )       //_64._m24
#define _64__m25 float (0.00                                )       //_64._m25



layout(constant_id = 4) const uint _2 = 0u;

struct _68
{
    float _m0;
    float _m1;
    float _m2;
    float _m3;
};

const float _920[4] = float[](-0.01171875, 0.00390625, 0.01171875, -0.00390625);

layout(set = 1, binding = 1, std140) uniform _62_64
{
    vec3 _m0;
    vec4 _m1;
    vec4 _m2;
    vec4 _m3;
    vec4 _m4;
    vec4 _m5;
    vec4 _m6;
    vec4 _m7;
    vec4 _m8;
    vec4 _m9;
    vec4 _m10;
    vec4 _m11;
    vec4 _m12;
    vec4 _m13;
    vec4 _m14;
    vec4 _m15;
    vec4 _m16;
    vec4 _m17;
    vec4 _m18;
    vec4 _m19;
    vec4 _m20;
    float _m21;
    vec3 _m22;
    vec4 _m23;
    vec4 _m24;
    float _m25;
} _64;

layout(set = 0, binding = 0, std140) uniform _69_71
{
    vec4 _m0;
    uint _m1;
    uint _m2;
    int _m3;
    int _m4;
    ivec4 _m5;
    uvec4 _m6;
    _68 _m7;
} _71;

layout(set = 2, binding = 0) uniform sampler2D _7;

layout(location = 0) in vec3 Varying_0;
layout(location = 1) in vec2 Varying_1;
layout(location = 0) out vec4 Output_0;
layout(location = 1) out vec4 Output_1;
float _19;
bool _22;
vec3 _24;
float _25;
bool _26;
vec3 _27;
float _28;
bool _29;
float _30;
vec3 _31;
vec4 _33;
float _34;
bvec3 _37;
vec3 _38;
vec2 _40;
vec3 _41;
vec3 _42;
vec3 _43;
vec2 _44;
bool _45;
float _46;
float _47;
float _48;
bool _49;
float _50;
float _51;
bvec2 _54;
float _55;
float _56;
bool _57;
float _58;
float _59;
float _60;
float _61;
float _939;
uint _943;
vec3 _949 = vec3(255.0);
uint _988;
vec3 _990 = vec3(255.0);

void _74()
{
    _19 = texture(_7, Varying_1).x;
    _19 = (_64__m2.x * _19) + _64__m2.y;
    _19 = 1.0 / _19;
    _43 = vec3(_19) * Varying_0;
    _24 = (Varying_0 * vec3(_19)) + _64__m0;
    _19 *= _64__m1.z;
    _58 = dot(_43, _43);
    _58 = sqrt(_58);
    _27.x = _58 + (-_64__m11.w);
    _29 = _27.x < 0.0;
    if ((int(_29) * (-1)) != 0)
    {
        discard;
    }
    _29 = 0.00999999977648258209228515625 < _64__m15.w;
    if (_29)
    {
        _29 = _64__m20.y < 0.5;
        if (_29)
        {
            _27 = _24 + (-_64__m15.xyz);
            _24.x = dot(_27, _27);
            _24.x = sqrt(_24.x);
            _24.x = (_24.x * _64__m17.z) + _64__m17.w;
            _24.x = clamp(_24.x, 0.0, 1.0);
            _24.x = (-_24.x) + 1.0;
            _31.x = _24.x * _24.x;
        }
        else
        {
            _24.x = _24.y + (-_64__m15.y);
            _50 = 1.0 / _64__m15.w;
            _24.x = _50 * _24.x;
            _24.x = clamp(_24.x, 0.0, 1.0);
            _50 = (_24.x * (-2.0)) + 3.0;
            _24.x *= _24.x;
            _30 = _24.x * _50;
            _31.x = _30;
        }
        _26 = _64__m20.x >= 0.0500000007450580596923828125;
        _24.x = float(_26);
        _24.x *= _31.x;
        _29 = 0.949999988079071044921875 >= _64__m20.x;
        _27.x = float(_29);
        _27.x *= _31.x;
        _25 = _24.x;
        _28 = _27.x;
    }
    else
    {
        _25 = 0.0;
        _28 = 0.0;
    }
    _33.x = (_58 * _64__m8.z) + _64__m8.w;
    _33.x = clamp(_33.x, 0.0, 1.0);
    _47 = (_58 * _64__m18.z) + _64__m18.w;
    _47 = clamp(_47, 0.0, 1.0);
    _31.x = (-_33.x) + _47;
    _31.x = (_25 * _31.x) + _33.x;
    _46 = (-_31.x) + 2.0;
    _31.x = _46 * _31.x;
    _43.x = dot(_43.xz, _43.xz);
    _43.x = sqrt(_43.x);
    _55 = (_43.x * _64__m10.x) + _64__m10.y;
    _55 = clamp(_55, 0.0, 1.0);
    _33.x = (_64__m0.y * _64__m10.z) + _64__m10.w;
    _33.x = clamp(_33.x, 0.0, 1.0);
    _47 = _64__m1.z * 0.99989998340606689453125;
    _22 = _19 >= _47;
    _47 = _31.x * _64__m7.w;
    _31.x = _22 ? _47 : _31.x;
    _46 = _22 ? _33.x : _55;
    _19 = (-_64__m3.w) + _64__m19.w;
    _19 = (_25 * _19) + _64__m3.w;
    _56 = _31.x + 9.9999997473787516355514526367188e-05;
    _56 = log2(_56);
    _19 = _56 * _19;
    _19 = exp2(_19);
    _55 = _64__m6.w * _64__m14.x;
    _19 = min(_55, _19);
    _19 = min(_19, 1.0);
    _55 = (_24.y * _64__m8.x) + _64__m8.y;
    _55 = clamp(_55, 0.0, 1.0);
    _31.x = (-_55) + 2.0;
    _31.x = _55 * _31.x;
    vec3 _432 = (_31.xxx * _64__m7.xyz) + _64__m6.xyz;
    _33 = vec4(_432.x, _432.y, _432.z, _33.w);
    _38 = (-_33.xyz) + _64__m19.xyz;
    vec3 _448 = (vec3(_25) * _38) + _33.xyz;
    _33 = vec4(_448.x, _448.y, _448.z, _33.w);
    _55 = _58 + (-_64__m5.w);
    _55 *= _64__m9.w;
    _55 = clamp(_55, 0.0, 1.0);
    _38 = (-_33.xyz) + _64__m9.xyz;
    vec3 _477 = (vec3(_55) * _38) + _33.xyz;
    _33 = vec4(_477.x, _477.y, _477.z, _33.w);
    _43.x = (_43.x * _64__m12.z) + _64__m12.w;
    _43.x = clamp(_43.x, 0.0, 1.0);
    _55 = (-_64__m4.y) + _64__m16.w;
    _55 = (_28 * _55) + _64__m4.y;
    vec2 _513 = _43.yy * _64__m4.xz;
    _38 = vec3(_513.x, _513.y, _38.z);
    _54 = lessThan(vec4(0.00999999977648258209228515625), abs(_38.xyxy)).xy;
    _40 = ((-_64__m4.xz) * _43.yy) + _64__m13.yw;
    _40 = min(_40, vec2(80.0));
    _40 *= vec2(1.44269502162933349609375);
    _40 = exp2(_40);
    _40 = (-_40) + _64__m13.xz;
    vec2 _554 = _40 / _38.xy;
    _38 = vec3(_554.x, _554.y, _38.z);
    _38.x = _54.x ? _38.x : _64__m13.x;
    _38.y = _54.y ? _38.y : _64__m13.z;
    _48 = _55 * _58;
    _48 *= (-_38.x);
    _48 = exp2(_48);
    _48 = (-_48) + 1.0;
    _48 = max(_48, 0.0);
    _55 = (_58 * _64__m5.x) + _64__m5.y;
    _55 = clamp(_55, 0.0, 1.0);
    _60 = (_58 * _64__m17.x) + _64__m17.y;
    _60 = clamp(_60, 0.0, 1.0);
    _31.x = (-_55) + _60;
    _31.x = (_28 * _31.x) + _55;
    _51 = (-_31.x) + 2.0;
    _55 = (-_64__m5.z) + _64__m18.x;
    _55 = (_28 * _55) + _64__m5.z;
    _61 = (_31.x * _51) + (-1.0);
    _55 = (_55 * _61) + 1.0;
    _31.x = _55 * _48;
    _48 = min(_31.x, _64__m6.w);
    _55 = _58 * _64__m4.w;
    _55 *= (-_38.y);
    _55 = exp2(_55);
    _55 = (-_55) + 1.0;
    _55 = max(_55, 0.0);
    _60 = (_58 * _64__m12.x) + _64__m12.y;
    _60 = clamp(_60, 0.0, 1.0);
    _31.x = (-_60) + 2.0;
    _31.x *= _60;
    _31.x = _55 * _31.x;
    _55 = min(_31.x, _64__m14.y);
    _31.x = _46 * _48;
    _31.y = _43.x * _55;
    _43 = (-_64__m3.xyz) + _64__m16.xyz;
    _43 = (vec3(_28) * _43) + _64__m3.xyz;
    _41 = vec3(_19) * _33.xyz;
    _42 = ((-_33.xyz) * vec3(_19)) + _43;
    _41 = (_31.xxx * _42) + _41;
    _19 = (-_19) + 1.0;
    _44 = (-_31.xy) + vec2(1.0);
    _19 = _44.x * _19;
    _31 = (_64__m11.xyz * _31.yyy) + _41;
    _19 = _44.y * _19;
    _45 = any(notEqual(vec4(0.0), vec4(_64__m21)));
    if (_45)
    {
        _43.x = dot(-_64__m0, -_64__m0);
        _43.x = sqrt(_43.x);
        _49 = 10000.0 >= _43.x;
        _37 = equal(vec4(_64__m25), vec4(0.0, 2.0, 1.0, 0.0)).xyz;
        _57 = _37.y && _37.x;
        _34 = dot(_31, vec3(0.2125000059604644775390625, 0.7153999805450439453125, 0.07209999859333038330078125));
        vec3 _822 = vec3(_34 * _64__m22.x, _34 * _64__m22.y, _34 * _64__m22.z);
        _33 = vec4(_822.x, _822.y, _33.z, _822.z);
        _41 = mix(_31, _33.xyw, bvec3(_37.z));
        _41 = mix(_41, _31, bvec3(_57));
        _33.x = (-_64__m23.z) + 1.0;
        _43.x = ((-_33.x) * 10000.0) + _43.x;
        _33.x = (_64__m23.z * 10000.0) + 9.9999997473787516355514526367188e-05;
        _43.x /= _33.x;
        _43.x = clamp(_43.x, 0.0, 1.0);
        _59 = (_43.x * (-_64__m24.x)) + _64__m24.x;
        _59 = clamp(_59, 0.0, 1.0);
        _41 = (-_31) + _41;
        _41 = (vec3(_59) * _41) + _31;
        _41 = mix(_41, _31, bvec3(_57));
        _31 = mix(_31, _41, bvec3(_49));
    }
    Output_0 = vec4(_31.x, _31.y, _31.z, Output_0.w);
    Output_0.w = _19;
    Output_1 = vec4(_31.x, _31.y, _31.z, Output_1.w);
    Output_1.w = _19;
}

void main()
{
    vec3 _946 = vec3(0.0);
    vec3 _989 = vec3(0.0);
    _74();
    if (_2 != 0u)
    {
        _939 = _920[((uint(gl_FragCoord.x) & 1u) << 1u) | (uint(gl_FragCoord.y) & 1u)];
        _943 = (_2 >> 0u) & 3u;
        switch (_943)
        {
            case 1u:
            {
                _946 = vec3(_939 * 2.0);
                _949 = vec3(15.0);
                break;
            }
            case 2u:
            {
                _946 = vec3(_939);
                _949 = vec3(31.0);
                break;
            }
            case 3u:
            {
                _946 = vec3(_939, _939 * 0.5, _939);
                _949 = vec3(31.0, 63.0, 31.0);
                break;
            }
        }
        vec3 _974 = Output_0.xyz + _946;
        Output_0 = vec4(_974.x, _974.y, _974.z, Output_0.w);
        vec3 _983 = round(Output_0.xyz * _949) / _949;
        Output_0 = vec4(_983.x, _983.y, _983.z, Output_0.w);
        _988 = (_2 >> 2u) & 3u;
        switch (_988)
        {
            case 1u:
            {
                _989 = vec3(_939 * 2.0);
                _990 = vec3(15.0);
                break;
            }
            case 2u:
            {
                _989 = vec3(_939);
                _990 = vec3(31.0);
                break;
            }
            case 3u:
            {
                _989 = vec3(_939, _939 * 0.5, _939);
                _990 = vec3(31.0, 63.0, 31.0);
                break;
            }
        }
        vec3 _1009 = Output_1.xyz + _989;
        Output_1 = vec4(_1009.x, _1009.y, _1009.z, Output_1.w);
        vec3 _1018 = round(Output_1.xyz * _990) / _990;
        Output_1 = vec4(_1018.x, _1018.y, _1018.z, Output_1.w);
    }
}

